[{"D:\\React Project\\ReactCource\\my-app\\src\\index.js":"1","D:\\React Project\\ReactCource\\my-app\\src\\App.js":"2","D:\\React Project\\ReactCource\\my-app\\src\\Components\\Player.js":"3","D:\\React Project\\ReactCource\\my-app\\src\\Components\\Song.js":"4","D:\\React Project\\ReactCource\\my-app\\src\\Components\\Util.js":"5","D:\\React Project\\ReactCource\\my-app\\src\\Components\\Library.js":"6","D:\\React Project\\ReactCource\\my-app\\src\\Components\\LibrarySong.js":"7","D:\\React Project\\ReactCource\\my-app\\src\\Components\\nav.js":"8"},{"size":413,"mtime":1609645320110,"results":"9","hashOfConfig":"10"},{"size":2431,"mtime":1609958587701,"results":"11","hashOfConfig":"10"},{"size":3512,"mtime":1609960403059,"results":"12","hashOfConfig":"10"},{"size":304,"mtime":1609645306275,"results":"13","hashOfConfig":"10"},{"size":3152,"mtime":1609645408065,"results":"14","hashOfConfig":"10"},{"size":606,"mtime":1609902005047,"results":"15","hashOfConfig":"10"},{"size":985,"mtime":1609955848779,"results":"16","hashOfConfig":"10"},{"size":397,"mtime":1609901999023,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"gdqgjw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\React Project\\ReactCource\\my-app\\src\\index.js",[],["38","39"],"D:\\React Project\\ReactCource\\my-app\\src\\App.js",[],"D:\\React Project\\ReactCource\\my-app\\src\\Components\\Player.js",["40","41","42"],"\r\nimport { React , useRef , useState , useEffect} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay,faAngleLeft,faAngleRight,faPause } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Player = ({songs, SetCurrentSong , currentSong , isPlaying , setSongs, setIsPlaying , audioRef , SongInfo , SetSongInfo}) => {\r\n  const activeLibraryHandler = (nextPrev) => {\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === nextPrev.id) {\r\n        return {\r\n          ...song,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...song,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n\r\n    setSongs(newSongs);\r\n  };\r\n  useEffect(() => {\r\n    const newSong =\r\n    songs.map((song)=> {\r\n        if(song.id === currentSong.id){\r\n            return {\r\n                ...song,\r\n                active:true\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                ...song,\r\n                active:false\r\n            }\r\n        }\r\n            \r\n    })\r\n  \r\n  \r\n  \r\n  setSongs(newSong);\r\n  }, [currentSong]);\r\n\r\nconst HandleSong = async (dir) => {\r\nlet currentindex = songs.findIndex((song) => song.id === currentSong.id);\r\n\r\nif(dir === \"front\"){\r\n  await SetCurrentSong(songs[(currentindex +1) % songs.length]);\r\n  activeLibraryHandler(songs[(currentindex +1) % songs.length]);\r\n  if(isPlaying){\r\n   \r\n        audioRef.current.play()\r\n    \r\n\r\n}\r\n  return;\r\n}\r\nif(dir === \"back\"){\r\n  if((currentindex -1) % songs.length === -1){\r\n    await SetCurrentSong(songs[songs.length-1]);\r\n    activeLibraryHandler(songs[songs.length-1]);\r\n    if(isPlaying){\r\n   \r\n      audioRef.current.play()\r\n  \r\n\r\n}\r\n    return;\r\n  }\r\n}\r\n await SetCurrentSong(songs[(currentindex -1) % songs.length]);\r\n activeLibraryHandler(songs[(currentindex -1) % songs.length]);\r\n if(isPlaying){\r\n   \r\n  audioRef.current.play()\r\n\r\n\r\n}\r\n\r\n}\r\nconst playSongHandler = () => {\r\n   \r\n   if(isPlaying){\r\n    audioRef.current.pause();\r\n    setIsPlaying(!isPlaying);\r\n   }\r\n   else {\r\n     audioRef.current.play();\r\n     setIsPlaying(!isPlaying);\r\n   }\r\n\r\n    }\r\n\r\nconst GetTime = (Time) =>{\r\n  return(\r\n    Math.floor(Time/60)+ \":\" + (\"0\" + Math.floor(Time%60)).slice(-2)\r\n  )\r\n}\r\nconst trackAnim = {\r\n  transform: `translateX(${SongInfo.animationPercentage}%)`,\r\n};\r\nconst DragHandler = (e) => {\r\n  audioRef.current.currentTime=e.target.value;\r\nSetSongInfo({...SongInfo , currentTime: e.target.value})\r\n}\r\n  return (\r\n    <div className=\"Player\">\r\n      <div className=\"Time-Control\">\r\n       <p>{GetTime(SongInfo.currentTime)}</p>\r\n       <div  style={{\r\n            background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\r\n          }}\r\n          className=\"track\" >\r\n       <input min={0} max={SongInfo.duration || 0} onChange={DragHandler} value ={SongInfo.currentTime} type=\"range\"></input>\r\n       <div style={trackAnim} className=\"animate-track\"></div>\r\n      \r\n      </div>\r\n      <p>{SongInfo.duration ? GetTime(SongInfo.duration) : \"0:00\"}</p>\r\n      </div>\r\n      <div className=\"Play-Control\">\r\n      <FontAwesomeIcon onClick={()=>HandleSong(\"back\")} className=\"SkipBack\" size=\"2x\" icon={faAngleLeft}/>\r\n    <FontAwesomeIcon onClick= {playSongHandler} className=\"Play\" size=\"2x\" icon={isPlaying ? faPause : faPlay}/>\r\n    <FontAwesomeIcon onClick={()=> HandleSong(\"front\")} className=\"SkipFront\"size=\"2x\"  icon={faAngleRight}/>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","D:\\React Project\\ReactCource\\my-app\\src\\Components\\Song.js",[],"D:\\React Project\\ReactCource\\my-app\\src\\Components\\Util.js",[],"D:\\React Project\\ReactCource\\my-app\\src\\Components\\Library.js",["43","44"],"import react from \"react\";\r\nimport LibrarySong from './LibrarySong';\r\n\r\n\r\nconst Library = ({ status ,setSongs ,songs , SetCurrentSong , isPlaying ,audioRef}) => {\r\n    return(\r\n        <div className={status ? \"library active-library \": \"library\"}>\r\n         <h2>Library</h2>\r\n        <div className=\"library-songs\">\r\n       \r\n{songs.map((Song) => (\r\n    <LibrarySong setSongs={setSongs}  id={Song.id} songs={songs} Song={Song} id={Song.id} key={Song.id} SetCurrentSong={SetCurrentSong}  isPlaying={isPlaying} audioRef={audioRef} />\r\n) )}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Library; ","D:\\React Project\\ReactCource\\my-app\\src\\Components\\LibrarySong.js",["45","46"],"import react from \"react\";\r\nimport Song from './Song';\r\n\r\nconst LibrarySong = ({setSongs,id ,songs,Song , SetCurrentSong , isPlaying , audioRef}) =>{\r\nconst songselectorHandler = async () => {\r\n await SetCurrentSong(Song);\r\n\r\nif(isPlaying){\r\n        audioRef.current.play()\r\n  \r\n\r\n}\r\nconst newSong =\r\n    songs.map((song)=> {\r\n        if(song.id === id){\r\n            return {\r\n                ...song,\r\n                active:true\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                ...song,\r\n                active:false\r\n            }\r\n        }\r\n            \r\n    })\r\n\r\n\r\n\r\nsetSongs(newSong);\r\n\r\n}\r\nreturn(\r\n    <div onClick={songselectorHandler} className={ Song.active ? \"library-song song selected\": \"library-song song\"}>\r\n\r\n        <img alt={Song.name} src={Song.cover}></img>\r\n        <div className=\"song-description\">\r\n        <h3>{Song.name}</h3>\r\n        <h4>{Song.artist}</h4>\r\n\r\n    </div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default LibrarySong; ","D:\\React Project\\ReactCource\\my-app\\src\\Components\\nav.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":2,"column":18,"nodeType":"53","messageId":"54","endLine":2,"endColumn":24},{"ruleId":"51","severity":1,"message":"55","line":2,"column":27,"nodeType":"53","messageId":"54","endLine":2,"endColumn":35},{"ruleId":"56","severity":1,"message":"57","line":45,"column":6,"nodeType":"58","endLine":45,"endColumn":19,"suggestions":"59"},{"ruleId":"51","severity":1,"message":"60","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":13},{"ruleId":"61","severity":1,"message":"62","line":12,"column":78,"nodeType":"63","endLine":12,"endColumn":90},{"ruleId":"51","severity":1,"message":"60","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":13},{"ruleId":"51","severity":1,"message":"64","line":2,"column":8,"nodeType":"53","messageId":"54","endLine":2,"endColumn":12},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["67"],"'react' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Song' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"70","text":"71"},[1101,1114],"[currentSong, setSongs, songs]"]